rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserNetid() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.netid;
    }
    
    // Admin role checking using Firebase custom claims
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Landing page email collection
    match /landing-emails/{emailId} {
      allow create: if true;
      allow read, update, delete: if false;
    }
    
    // User profiles
    match /profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User accounts
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Preferences collection
    match /preferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Weekly Prompts - all authenticated users can read, only admins can write
    match /weeklyPrompts/{promptId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Weekly Prompt Answers - users can only access their own
    match /weeklyPromptAnswers/{answerId} {
      allow read: if isAuthenticated() && resource.data.netid == getUserNetid();
      allow create: if isAuthenticated() && 
        request.resource.data.netid == getUserNetid() &&
        answerId == request.resource.data.netid + '_' + request.resource.data.promptId &&
        request.resource.data.answer.size() <= 500 &&
        request.resource.data.answer.size() > 0;
      allow update, delete: if false;
    }
    
    // Weekly Matches - users can only read their own, only update revealed array
    match /weeklyMatches/{matchId} {
      allow read: if isAuthenticated() && resource.data.netid == getUserNetid();
      allow update: if isAuthenticated() &&
        resource.data.netid == getUserNetid() &&
        request.resource.data.netid == resource.data.netid &&
        request.resource.data.promptId == resource.data.promptId &&
        request.resource.data.matches == resource.data.matches &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow create, delete: if false;
    }

    // Admins collection - only admins can read their own document
    match /admins/{adminId} {
      allow read: if isAuthenticated() && request.auth.uid == adminId;
      allow write: if false; // Only server-side writes allowed
    }

    // Admin audit logs - only admins can read
    match /adminAuditLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes allowed
    }

    // Nudges - users can create nudges to their matches, read their own nudges
    match /nudges/{nudgeId} {
      allow create: if isAuthenticated() &&
        request.resource.data.fromNetid == getUserNetid();
      allow read: if isAuthenticated() &&
        (resource.data.fromNetid == getUserNetid() ||
         resource.data.toNetid == getUserNetid());
      allow update, delete: if false; // Only server-side updates allowed
    }

    // Notifications - only backend can access (using Bearer token API)
    match /notifications/{notificationId} {
      allow read: if false; // Only backend via API
      allow create: if false; // Only backend via API
      allow update: if false; // Only backend via API
      allow delete: if false; // Only backend via API
    }

    // Conversations - users can only read/write conversations they're part of
    match /conversations/{conversationId} {
      // Helper function to check if user is a participant
      function isParticipant() {
        return request.auth.uid in resource.data.participantIds;
      }

      // Users can read conversations they're a participant in
      allow read: if isAuthenticated() && isParticipant();

      // Users cannot directly create/update/delete conversations (must use backend API)
      allow write: if false;

      // Messages subcollection
      match /messages/{messageId} {
        // Users can read messages in conversations they're part of
        // Check parent conversation's participantIds
        allow read: if isAuthenticated() &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // Users cannot directly write messages (must use backend API)
        allow write: if false;
      }
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}